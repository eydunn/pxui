{"version":3,"sources":["img/logo.svg","components/Layouts/Header.jsx","components/Select/SelectorMulti.jsx","components/Loading/Loading.jsx","components/Select/Selectors.jsx","components/ListMenu/ListMenu.jsx","components/TablesData/TablesData.jsx","components/Layouts/MainBody.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","Grid","container","spacing","item","xs","href","src","Logo","style","height","alignIem","alt","onClick","window","location","animatedComponents","makeAnimated","SelectorMulti","props","_useState","useState","options","Object","slicedToArray","_useState3","code","_useState5","text","_useState7","elimination","customStyles","option","provided","state","_objectSpread","borderBottom","color","isSelected","className","react_select_browser_esm","styles","onChange","variables","callBack","handleChange","closeMenuOnSelect","components","defaultValue","isMulti","Loading","_ref","type","width","display","alignItems","justifyContent","react_loading_default","selectorArray","query","Selectors","e","_useState2","postData","setPostData","_useState4","isLoading","setIsLoading","values","i","length","push","value","obj","selection","filter","findIndex","o","fetchPostHttp","response","px","_x","_fetchPostHttp","apply","this","arguments","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","fetch","url","body","JSON","stringify","method","then","ok","console","log","Error","catch","err","stop","useEffect","json","data","table","selectorName","title","selectorCounter","timeBoolean","time","y","label","valueTexts","reverse","aa","components_Loading_Loading","ListMenu","setData","fetchData","_fetchData","_callee3","_context3","sent","abrupt","mainUrl","fetchDataTree","countryArr","key","t0","keys","t1","done","id","nodes","_x2","getDataTree","_getDataTree","_callee4","yourDataTree","_context4","_callee2","_context2","react","main_default","onClickItem","tmpUrl","TablesData","useStyles","makeStyles","theme","root","flexGrow","paper","padding","textAlign","palette","primary","MainBody","setUrl","classes","sm","Paper","Typography","component","components_ListMenu_ListMenu","marginBottom","Select_Selectors","App","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0388507e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.565f9a19.svg\";","import React from \"react\";\nimport Logo from \"../../img/logo.svg\";\nimport Grid from \"@material-ui/core/Grid\";\n\nexport default function Header() {\n  const redirectToUrl = () => {\n    window.location.href = \"https://www.google.com\";\n  };\n\n  return (\n    <div>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <a href=\"http://www.hagstova.fo\">\n            <img\n              src={Logo}\n              style={{ height: \"3em\", alignIem: \"left\" }}\n              alt=\"Hagstovan\"\n              onClick={redirectToUrl}\n            />\n          </a>\n          <hr />\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport Select from \"react-select\";\nimport makeAnimated from \"react-select/animated\";\nimport \"font-awesome/css/font-awesome.min.css\";\n\nconst animatedComponents = makeAnimated();\n\nexport default function SelectorMulti(props) {\n  const [options] = useState(props.options);\n  const [code] = useState(props.code);\n  const [text] = useState(props.text);\n  const [elimination] = useState(props.elimination);\n\n  const handleChange = code => variables => {\n    props.callBack(code, variables);\n  };\n\n  const codeRequired = () => {\n    if (elimination === true) {\n      return <div className=\"selectorsHeadLine\">{text} </div>;\n    } else {\n      return (\n        <div className=\"selectorsHeadLine\">\n          {text}{\" \"}\n          <i className=\"fa fa-exclamation-circle\" style={{ color: \"red\" }} />\n        </div>\n      );\n    }\n  };\n\n  const customStyles = {\n    option: (provided, state) => ({\n      ...provided,\n      borderBottom: \"1px dotted #2d4182\",\n      color: state.isSelected ? \"red\" : \"#2d4182\"\n    })\n  };\n  return (\n    <div>\n      {codeRequired(elimination, code)}\n      <Select\n        styles={customStyles}\n        onChange={handleChange(code)}\n        closeMenuOnSelect={false}\n        components={animatedComponents}\n        defaultValue={[options[0]]}\n        isMulti\n        options={options}\n      />\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactLoading from \"react-loading\";\n\nconst Loading = ({ type, color, height, width }) => (\n  <div\n    style={{\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\"\n    }}\n  >\n    <ReactLoading type={type} color={color} height={height} width={width} />\n  </div>\n);\n\nexport default Loading;\n","import React, { useState, useEffect } from \"react\";\nimport SelectorMulti from \"./SelectorMulti\";\nimport Loading from \"../Loading/Loading\";\n\nlet mainObject = {};\nlet selectorArray = [];\nlet query = [];\n\nconst Selectors = props => {\n  const [postData, setPostData] = useState(null);\n  const [isLoading, setIsLoading] = useState(null);\n\n  const onChangeData = e => {\n    props.onChange(e);\n  };\n\n  useEffect(() => {\n    selectorArray = [];\n    query.length = 0;\n    setIsLoading(true);\n    fetch(props.url)\n      .then(response => {\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch.\");\n        }\n        return response.json();\n      })\n      .then(data => {\n        setIsLoading(false);\n        let table = null;\n        let options = [];\n        let selectorName = [];\n        //----\n\n        table = data.title;\n        selectorArray.push(<div className=\"headLine\">{table}</div>);\n        //----\n        let selectorCounter = 0;\n        for (let i = 0; i < data.variables.length; i++) {\n          let timeBoolean = data.variables[i].time;\n          let elimination = data.variables[i].elimination;\n          let code = data.variables[i].code;\n          let text = data.variables[i].text;\n\n          for (\n            let y = 0;\n            y < data.variables[selectorCounter].values.length;\n            y++\n          ) {\n            options.push({\n              value: data.variables[selectorCounter].values[y],\n              label: data.variables[selectorCounter].valueTexts[y]\n            });\n          }\n          if (timeBoolean === true) {\n            options.reverse();\n          }\n          if (query.length !== data.variables.length) {\n            let value = options[0].value;\n\n            const values = [];\n            values.push(value);\n            const filter = \"item\";\n            const selection = { filter, values };\n            const aa = { code, selection };\n            query.push(aa);\n          }\n          selectorArray.push(\n            <SelectorMulti\n              options={options}\n              selectorName={selectorName}\n              code={code}\n              text={text}\n              elimination={elimination}\n              callBack={handleChange}\n            />\n          );\n          selectorName = [];\n          options = [];\n\n          selectorCounter++;\n        }\n        const response = { px: \"\" };\n        mainObject = { query, response };\n        fetchPostHttp(mainObject);\n      })\n      .catch(err => {\n        console.log(err);\n        setIsLoading(false);\n      });\n  }, [props.url]);\n\n  function handleChange(code, variables) {\n    const values = [];\n    if (variables != null) {\n      for (let i = 0; i < variables.length; i++) {\n        values.push(variables[i].value);\n      }\n    }\n    const filter = \"item\";\n    const selection = { filter, values };\n    const obj = { code, selection };\n\n    var i = query.findIndex(o => o.code === obj.code);\n    if (query[i]) {\n      query[i] = obj;\n    } else {\n      query.push(obj);\n    }\n    const response = { px: \"\" };\n    mainObject = { query, response };\n    fetchPostHttp(mainObject, code);\n  }\n\n  async function fetchPostHttp(obj) {\n    await fetch(props.url, {\n      body: JSON.stringify(obj),\n      method: \"post\"\n    })\n      .then(response => {\n        if (!response.ok) {\n          console.log(\"Failed response\", response);\n          throw new Error(\"POST Failed to fetch.\");\n        }\n        return response.text();\n      })\n      .then(response => {\n        setPostData(response);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }\n\n  if (isLoading) {\n    return (\n      <Loading\n        type=\"spinningBubbles\"\n        color=\"#2d4182\"\n        height=\"2%\"\n        width=\"2%\"\n      ></Loading>\n    );\n  }\n  if (selectorArray && postData) {\n    return <div onChange={onChangeData(postData)}>{selectorArray}</div>;\n  }\n  return (\n    <div className=\"noData\">\n      Eingin talva vald\n      <Loading type=\"cylon\" color=\"#2d4182\" height=\"3%\" width=\"3%\"></Loading>\n    </div>\n  );\n};\nexport default Selectors;\n","import React, { Fragment, useEffect, useState } from \"react\";\nimport \"../../styles/style.css\";\nimport Loading from \"../Loading/Loading\";\nimport TreeMenu from \"react-simple-tree-menu\";\n\n//Json file of treeMenu\nimport staticData from \"../../json/menu\";\n\n//CSS from the library\n//import \"../../../node_modules/react-simple-tree-menu/dist/main.css\";\n/*\nChange in library: react-simple-tree-menu\nFiles: walk.d.ts, main.js\n\"key\" to \"id\"\n\"label\" to \"text\"\n*/\nconst ListMenu = props => {\n  const [data, setData] = useState(null);\n\n  async function fetchData(url) {\n    const response = await fetch(url);\n    const json = await response.json();\n    return json;\n  }\n  const mainUrl = \"https://statbank.hagstova.fo/api/v1/fo/H2/\";\n\n  const fetchDataTree = async url => {\n    //i assume you will handle the fetch with your own method\n    let countryArr = await fetchData(url);\n\n    for (let key in countryArr) {\n      if (countryArr[key].type === \"l\") {\n        countryArr[key].nodes = await fetchDataTree(\n          url + \"/\" + countryArr[key].id\n        );\n      }\n    }\n    return countryArr;\n  };\n\n  async function getDataTree() {\n    const yourDataTree = await fetchDataTree(mainUrl);\n    setData(yourDataTree);\n  }\n\n  useEffect(async () => {\n    getDataTree();\n  }, []);\n\n  const handleClick = e => {\n    if (e.type === \"t\") {\n      const tmpId = e.id;\n      const tmpUrl = \"https://statbank.hagstova.fo/api/v1/fo/H2/\" + tmpId;\n      props.onClickItem(tmpUrl);\n    }\n  };\n  if (data) {\n    return (\n      <Fragment>\n        <div className=\"headLine\">Hagtalsgrunnur</div>\n        <TreeMenu className=\"tree-item\" data={data} onClickItem={handleClick} />\n      </Fragment>\n    );\n  }\n\n  return (\n    <Loading type=\"spin\" color=\"#2d4182\" height=\"20%\" width=\"20%\"></Loading>\n  );\n};\n\nexport default ListMenu;\n","import React from \"react\";\n\nexport default function TablesData(props) {\n  if (props.data) {\n    return <div>{props.data}</div>;\n  }\n  return <div className=\"noData\">Einki dáta</div>;\n}\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\n\nimport Selectors from \"../Select/Selectors\";\nimport ListMenu from \"../ListMenu/ListMenu\";\nimport TableData from \"../TablesData/TablesData\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.primary\n  }\n}));\n\nexport default function MainBody() {\n  const [url, setUrl] = useState(\"\");\n  const [data, setData] = useState(\"\");\n\n  const classes = useStyles();\n\n  const handleChangeUrl = e => {\n    setUrl(e);\n  };\n\n  const handleChangeData = e => {\n    setData(e);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={2}>\n        <Grid item xs={12} sm={4}>\n          <Paper className={classes.paper}>\n            <Typography component={\"span\"}>\n              <ListMenu onClickItem={handleChangeUrl} />\n            </Typography>\n          </Paper>\n        </Grid>\n        <Grid item xs={12} sm={8}>\n          <Paper style={{ marginBottom: \"0.5cm\" }} className={classes.paper}>\n            <Selectors onChange={handleChangeData} url={url} />\n          </Paper>\n          <Paper className={classes.paper}>\n            <TableData data={data} />\n          </Paper>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"../src/styles/style.css\";\nimport Header from \"./components/Layouts/Header\";\nimport MainBody from \"./components/Layouts/MainBody\";\n//import Footer from \"./components/Layouts/Footer\";\nfunction App() {\n\n\n  return (\n    <div >\n      <Header></Header>\n      <MainBody ></MainBody>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}